{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\src\\\\Container\\\\AddComment.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport { saveComment } from \"../Actions/PostActions\";\nimport { required } from \"../Helpers/ReduxFormValidation\";\n\nvar AddComment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddComment, _Component);\n\n  function AddComment() {\n    _classCallCheck(this, AddComment);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AddComment).apply(this, arguments));\n  }\n\n  _createClass(AddComment, [{\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this = this;\n\n      this.props.saveComment(values, this.props.id, this.props.uid).then(function () {\n        _this.props.dispatch(reset(\"CreateCommentForm\"));\n      });\n    }\n  }, {\n    key: \"renderName\",\n    value: function renderName(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var errStyle = {\n        borderColor: \"red\"\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"textarea\", Object.assign({\n        className: \"field\",\n        placeholder: \"Upi\\u0161i svoje ime...\",\n        style: touched && error ? errStyle : null\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderComment\",\n    value: function renderComment(field) {\n      var _field$meta2 = field.meta,\n          touched = _field$meta2.touched,\n          error = _field$meta2.error;\n      var errStyle = {\n        borderColor: \"red\"\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"textarea\", Object.assign({\n        className: \"field\",\n        placeholder: \"Upi\\u0161i svoj komentar...\",\n        style: touched && error ? errStyle : null\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          classes = _this$props.classes;\n      return React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"field\",\n        type: \"text\",\n        name: \"name\",\n        validate: required,\n        component: this.renderName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"content\",\n        component: this.renderComment,\n        validate: required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"d-flex justify-content-end mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-success btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Save\")));\n    }\n  }]);\n\n  return AddComment;\n}(Component);\n\nexport default reduxForm({\n  form: \"CreateCommentForm\"\n})(connect(function (state, ownProps) {\n  return {\n    uid: state.user.uid\n  };\n}, {\n  saveComment: saveComment\n})(AddComment));","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\Container\\AddComment.jsx"],"names":["React","Component","connect","Field","reduxForm","reset","saveComment","required","AddComment","values","props","id","uid","then","dispatch","field","meta","touched","error","errStyle","borderColor","input","handleSubmit","classes","onSubmit","bind","renderName","renderComment","form","state","ownProps","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport { saveComment } from \"../Actions/PostActions\";\r\nimport { required } from \"../Helpers/ReduxFormValidation\";\r\n\r\nclass AddComment extends Component {\r\n  onSubmit(values) {\r\n    this.props.saveComment(values, this.props.id, this.props.uid).then(() => {\r\n      this.props.dispatch(reset(\"CreateCommentForm\"));\r\n    });\r\n  }\r\n  renderName(field) {\r\n    const {\r\n      meta: { touched, error }\r\n    } = field;\r\n    const errStyle = {\r\n      borderColor: \"red\"\r\n    };\r\n    return (\r\n      <div>\r\n        <textarea\r\n          className=\"field\"\r\n          placeholder=\"Upiši svoje ime...\"\r\n          style={touched && error ? errStyle : null}\r\n          {...field.input}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  renderComment(field) {\r\n    const {\r\n      meta: { touched, error }\r\n    } = field;\r\n    const errStyle = {\r\n      borderColor: \"red\"\r\n    };\r\n    return (\r\n      <div>\r\n        <textarea\r\n          className=\"field\"\r\n          placeholder=\"Upiši svoj komentar...\"\r\n          style={touched && error ? errStyle : null}\r\n          {...field.input}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit, classes } = this.props;\r\n    return (\r\n      <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\r\n        <br />\r\n        <input\r\n          className=\"field\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          validate={required}\r\n          component={this.renderName}\r\n        />{\" \"}\r\n        <br />\r\n        <Field\r\n          name=\"content\"\r\n          component={this.renderComment}\r\n          validate={required}\r\n        />\r\n        <div className=\"d-flex justify-content-end mt-1\">\r\n          <button type=\"submit\" className=\"btn btn-success btn-sm\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reduxForm({\r\n  form: \"CreateCommentForm\"\r\n})(\r\n  connect(\r\n    (state, ownProps) => ({ uid: state.user.uid }),\r\n    { saveComment }\r\n  )(AddComment)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}