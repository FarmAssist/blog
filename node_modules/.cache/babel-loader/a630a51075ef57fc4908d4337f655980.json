{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\src\\\\Container\\\\ListPosts.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport { Link } from \"react-router-dom\";\nimport { required } from \"../Helpers/ReduxFormValidation\";\nimport Navbar from \"../Layout/Navbar\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateProject from \"./CreateProject\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport * as firebase from \"firebase\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport PropTypes from \"prop-types\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"renderPosts\",\n    value: function renderPosts() {\n      var _this = this;\n\n      return _.map(this.props.posts, function (post, key) {\n        return React.createElement(PostCard, {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/\".concat(key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, post.title)), React.createElement(\"p\", {\n          className: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, post.body), post.uid === _this.props.user.uid && React.createElement(\"button\", {\n          className: \"btn btn-danger float-right\",\n          onClick: function onClick() {\n            return _this.props.deletePost(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \"Delete\"));\n      });\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var errStyle = {\n        borderColor: \"red\"\n      };\n      return React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        placeholder: \"Enter a \".concat(field.label, \"...\")\n      }, field.input, {\n        className: field.class,\n        style: field.meta.touched && field.meta.error ? errStyle : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      this.props.savePost(values, this.props.user.uid).then(this.props.dispatch(reset(\"NewPost\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          _this2.props.logout();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Sign out\")), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.renderPosts()), React.createElement(\"div\", {\n        className: \"navbar fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        className: \"footerForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderField,\n        label: \"Title\",\n        class: \"footer-title\",\n        validate: required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"body\",\n        component: this.renderField,\n        label: \"Body\",\n        class: \"footer-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn footer-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Post\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar form = reduxForm({\n  form: \"NewPost\"\n})(App);\nform = connect(function (state, ownProps) {\n  return {\n    posts: state.posts,\n    user: state.user\n  };\n}, {\n  savePost: savePost,\n  getPosts: getPosts,\n  deletePost: deletePost,\n  getUser: getUser,\n  logout: logout\n})(form);\nexport default form;\n/*import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport { Link } from \"react-router-dom\";\nimport { required } from \"../Helpers/ReduxFormValidation\";\nimport Navbar from \"../Layout/Navbar\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateProject from \"./CreateProject\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport * as firebase from \"firebase\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport PropTypes from \"prop-types\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600,\n    backgroundColor: \"#e0e0e0\",\n    marginTop: -10\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    top: 5\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  },\n  paper: {\n    position: \"relative\",\n    width: \"50%\",\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  },\n  modalStyle1: {\n    overflow: \"scroll\",\n    height: \"100%\",\n    display: \"block\"\n  }\n});\n\nclass App extends Component {\n  state = {\n    open: false,\n    message: localStorage.getItem(\"message\") || \"\"\n  };\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n  getTime() {\n    return <div>hello</div>;\n  }\n  renderPosts() {\n    console.log(this.props.user.uid);\n    console.log(this.props.user.email);\n\n    return _.map(this.props.posts, (post, key) => {\n      var newTime = post.time,\n        formatTime = new Date(newTime).toLocaleString();\n      return (\n        <Link to={`/${key}`}>\n          <div className=\"tile\">\n            <CardMedia>\n              <span>{renderHTML(post.naslovna)}</span>\n\n              <div className=\"text\">\n                <h1>{post.title}</h1>\n\n                <p className=\"animate-text\">\n                  <span className=\"sazetak\"> {post.sazetak}</span>\n                </p>\n                <p className=\"animate-text\">\n                  <span>Autor: {post.signature}</span> <br />\n                  <span>Kreirano: {formatTime}</span>\n                </p>\n              </div>\n            </CardMedia>\n          </div>{\" \"}\n        </Link>\n      );\n    });\n  }\n\n  renderField(field) {\n    const errStyle = {\n      borderColor: \"red\"\n    };\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n        style={field.meta.touched && field.meta.error ? errStyle : null}\n      />\n    );\n  }\n\n  onSubmit(values) {\n    this.props\n      .savePost(values, this.props.user.uid)\n      .then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  adduserid() {\n    var user = firebase.auth().currentUser;\n    var userid = user.uid;\n    // console.log(userid);\n  }\n  getUsername() {\n    var mail = this.props.user.email;\n    var username = mail.substring(0, mail.indexOf(\"@\"));\n    localStorage.setItem(\"username\", username);\n\n    return username;\n  }\n  onChange = event => {\n    const message = event.target.value;\n\n    localStorage.getItem(\"message\", message);\n    this.setState({ message });\n  };\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <SignedInLinks />\n        <div className=\"row\">\n          {this.getUsername()} <br />\n          <div className=\"col-10 right\">{this.renderPosts().reverse()}</div>\n          {this.adduserid()};\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(\n  form\n);  */","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\Container\\ListPosts.jsx"],"names":["React","Component","connect","getPosts","savePost","deletePost","Field","reduxForm","reset","_","PostCard","getUser","logout","Link","required","Navbar","SignedInLinks","Button","Modal","CreateProject","withStyles","CardMedia","renderHTML","compose","firebase","withWidth","PropTypes","App","map","props","posts","post","key","title","body","uid","user","field","errStyle","borderColor","label","input","class","meta","touched","error","values","then","dispatch","handleSubmit","renderPosts","onSubmit","bind","renderField","form","state","ownProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport { Link } from \"react-router-dom\";\nimport { required } from \"../Helpers/ReduxFormValidation\";\nimport Navbar from \"../Layout/Navbar\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateProject from \"./CreateProject\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport * as firebase from \"firebase\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport PropTypes from \"prop-types\";\n\nclass App extends Component {\n  renderPosts() {\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <PostCard key={key}>\n          <Link to={`/${key}`}>\n            <h3>{post.title}</h3>\n          </Link>\n          <p className=\"card-text\">{post.body}</p>\n          {post.uid === this.props.user.uid && (\n            <button\n              className=\"btn btn-danger float-right\"\n              onClick={() => this.props.deletePost(key)}\n            >\n              Delete\n            </button>\n          )}\n        </PostCard>\n      );\n    });\n  }\n\n  renderField(field) {\n    const errStyle = {\n      borderColor: \"red\"\n    };\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n        style={field.meta.touched && field.meta.error ? errStyle : null}\n      />\n    );\n  }\n\n  onSubmit(values) {\n    this.props\n      .savePost(values, this.props.user.uid)\n      .then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div>\n        <div className=\"navbar\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              this.props.logout();\n            }}\n          >\n            Sign out\n          </button>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"main\">{this.renderPosts()}</div>\n          <div className=\"navbar fixed-bottom\">\n            <form\n              onSubmit={handleSubmit(this.onSubmit.bind(this))}\n              className=\"footerForm\"\n            >\n              <Field\n                name=\"title\"\n                component={this.renderField}\n                label=\"Title\"\n                class=\"footer-title\"\n                validate={required}\n              />\n              <Field\n                name=\"body\"\n                component={this.renderField}\n                label=\"Body\"\n                class=\"footer-body\"\n              />\n              <button type=\"submit\" className=\"btn footer-button\">\n                Post\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\n\nexport default form;\n\n/*import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport { Link } from \"react-router-dom\";\nimport { required } from \"../Helpers/ReduxFormValidation\";\nimport Navbar from \"../Layout/Navbar\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport CreateProject from \"./CreateProject\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport * as firebase from \"firebase\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport PropTypes from \"prop-types\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600,\n    backgroundColor: \"#e0e0e0\",\n    marginTop: -10\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    top: 5\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  },\n  paper: {\n    position: \"relative\",\n    width: \"50%\",\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  },\n  modalStyle1: {\n    overflow: \"scroll\",\n    height: \"100%\",\n    display: \"block\"\n  }\n});\n\nclass App extends Component {\n  state = {\n    open: false,\n    message: localStorage.getItem(\"message\") || \"\"\n  };\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n  getTime() {\n    return <div>hello</div>;\n  }\n  renderPosts() {\n    console.log(this.props.user.uid);\n    console.log(this.props.user.email);\n\n    return _.map(this.props.posts, (post, key) => {\n      var newTime = post.time,\n        formatTime = new Date(newTime).toLocaleString();\n      return (\n        <Link to={`/${key}`}>\n          <div className=\"tile\">\n            <CardMedia>\n              <span>{renderHTML(post.naslovna)}</span>\n\n              <div className=\"text\">\n                <h1>{post.title}</h1>\n\n                <p className=\"animate-text\">\n                  <span className=\"sazetak\"> {post.sazetak}</span>\n                </p>\n                <p className=\"animate-text\">\n                  <span>Autor: {post.signature}</span> <br />\n                  <span>Kreirano: {formatTime}</span>\n                </p>\n              </div>\n            </CardMedia>\n          </div>{\" \"}\n        </Link>\n      );\n    });\n  }\n\n  renderField(field) {\n    const errStyle = {\n      borderColor: \"red\"\n    };\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n        style={field.meta.touched && field.meta.error ? errStyle : null}\n      />\n    );\n  }\n\n  onSubmit(values) {\n    this.props\n      .savePost(values, this.props.user.uid)\n      .then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  adduserid() {\n    var user = firebase.auth().currentUser;\n    var userid = user.uid;\n    // console.log(userid);\n  }\n  getUsername() {\n    var mail = this.props.user.email;\n    var username = mail.substring(0, mail.indexOf(\"@\"));\n    localStorage.setItem(\"username\", username);\n\n    return username;\n  }\n  onChange = event => {\n    const message = event.target.value;\n\n    localStorage.getItem(\"message\", message);\n    this.setState({ message });\n  };\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <SignedInLinks />\n        <div className=\"row\">\n          {this.getUsername()} <br />\n          <div className=\"col-10 right\">{this.renderPosts().reverse()}</div>\n          {this.adduserid()};\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(\n  form\n);  */\n"]},"metadata":{},"sourceType":"module"}