{"ast":null,"code":"import { auth, googleProvider } from \"../Firebase\";\nexport var GET_USER = \"get_user\";\nexport var USER_STATUS = \"user_status\";\nexport function getUser() {\n  return function (dispatch) {\n    dispatch({\n      type: USER_STATUS,\n      payload: true\n    });\n    auth.onAuthStateChanged(function (user) {\n      dispatch({\n        type: GET_USER,\n        payload: user\n      });\n      dispatch({\n        type: USER_STATUS,\n        payload: false\n      });\n    });\n  };\n}\nexport function login(email, password) {\n  console.log(email);\n  return function (dispatch) {\n    return auth.signInWithEmailAndPassword(email, password);\n  };\n}\nexport function logout() {\n  return function (dispatch) {\n    return auth.signOut();\n  };\n}\nexport function createAccount(email, password) {\n  return function (dispatch) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  };\n}\nexport function googleLogin() {\n  return function (dispatch) {\n    return auth.signInWithPopup(googleProvider);\n  };\n}\nexport var signUp = function signUp(newUser) {\n  return function (dispatch) {\n    return auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(function (resp) {\n      return auth.collection(\"users\").doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      });\n    }).then(function () {\n      dispatch({\n        type: \"SIGNUP_SUCCESS\"\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: \"SIGNUP_ERROR\",\n        err: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\Actions\\UserActions.jsx"],"names":["auth","googleProvider","GET_USER","USER_STATUS","getUser","dispatch","type","payload","onAuthStateChanged","user","login","email","password","console","log","signInWithEmailAndPassword","logout","signOut","createAccount","createUserWithEmailAndPassword","googleLogin","signInWithPopup","signUp","newUser","then","resp","collection","doc","uid","set","firstName","lastName","initials","catch","err"],"mappings":"AAAA,SAASA,IAAT,EAAeC,cAAf,QAAqC,aAArC;AAEA,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,WADC;AAEPI,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAIAP,IAAAA,IAAI,CAACQ,kBAAL,CAAwB,UAAAC,IAAI,EAAI;AAC9BJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,QADC;AAEPK,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAIAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,WADC;AAEPI,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KATD;AAUD,GAfD;AAgBD;AAED,OAAO,SAASG,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SAAO,UAAAN,QAAQ;AAAA,WAAIL,IAAI,CAACe,0BAAL,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAJ;AAAA,GAAf;AACD;AAED,OAAO,SAASI,MAAT,GAAkB;AACvB,SAAO,UAAAX,QAAQ;AAAA,WAAIL,IAAI,CAACiB,OAAL,EAAJ;AAAA,GAAf;AACD;AAED,OAAO,SAASC,aAAT,CAAuBP,KAAvB,EAA8BC,QAA9B,EAAwC;AAC7C,SAAO,UAAAP,QAAQ;AAAA,WAAIL,IAAI,CAACmB,8BAAL,CAAoCR,KAApC,EAA2CC,QAA3C,CAAJ;AAAA,GAAf;AACD;AAED,OAAO,SAASQ,WAAT,GAAuB;AAC5B,SAAO,UAAAf,QAAQ;AAAA,WAAIL,IAAI,CAACqB,eAAL,CAAqBpB,cAArB,CAAJ;AAAA,GAAf;AACD;AACD,OAAO,IAAMqB,MAAM,GAAG,SAATA,MAAS,CAAAC,OAAO,EAAI;AAC/B,SAAO,UAAAlB,QAAQ;AAAA,WACbL,IAAI,GACDmB,8BADH,CACkCI,OAAO,CAACZ,KAD1C,EACiDY,OAAO,CAACX,QADzD,EAEGY,IAFH,CAEQ,UAAAC,IAAI,EAAI;AACZ,aAAOzB,IAAI,CACR0B,UADI,CACO,OADP,EAEJC,GAFI,CAEAF,IAAI,CAAChB,IAAL,CAAUmB,GAFV,EAGJC,GAHI,CAGA;AACHC,QAAAA,SAAS,EAAEP,OAAO,CAACO,SADhB;AAEHC,QAAAA,QAAQ,EAAER,OAAO,CAACQ,QAFf;AAGHC,QAAAA,QAAQ,EAAET,OAAO,CAACO,SAAR,CAAkB,CAAlB,IAAuBP,OAAO,CAACQ,QAAR,CAAiB,CAAjB;AAH9B,OAHA,CAAP;AAQD,KAXH,EAYGP,IAZH,CAYQ,YAAM;AACVnB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAdH,EAeG2B,KAfH,CAeS,UAAAC,GAAG,EAAI;AACZ7B,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,cAAR;AAAwB4B,QAAAA,GAAG,EAAHA;AAAxB,OAAD,CAAR;AACD,KAjBH,CADa;AAAA,GAAf;AAmBD,CApBM","sourcesContent":["import { auth, googleProvider } from \"../Firebase\";\r\n\r\nexport const GET_USER = \"get_user\";\r\nexport const USER_STATUS = \"user_status\";\r\nexport function getUser() {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: USER_STATUS,\r\n      payload: true\r\n    });\r\n    auth.onAuthStateChanged(user => {\r\n      dispatch({\r\n        type: GET_USER,\r\n        payload: user\r\n      });\r\n      dispatch({\r\n        type: USER_STATUS,\r\n        payload: false\r\n      });\r\n    });\r\n  };\r\n}\r\n\r\nexport function login(email, password) {\r\n  console.log(email);\r\n  return dispatch => auth.signInWithEmailAndPassword(email, password);\r\n}\r\n\r\nexport function logout() {\r\n  return dispatch => auth.signOut();\r\n}\r\n\r\nexport function createAccount(email, password) {\r\n  return dispatch => auth.createUserWithEmailAndPassword(email, password);\r\n}\r\n\r\nexport function googleLogin() {\r\n  return dispatch => auth.signInWithPopup(googleProvider);\r\n}\r\nexport const signUp = newUser => {\r\n  return dispatch =>\r\n    auth()\r\n      .createUserWithEmailAndPassword(newUser.email, newUser.password)\r\n      .then(resp => {\r\n        return auth\r\n          .collection(\"users\")\r\n          .doc(resp.user.uid)\r\n          .set({\r\n            firstName: newUser.firstName,\r\n            lastName: newUser.lastName,\r\n            initials: newUser.firstName[0] + newUser.lastName[0]\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: \"SIGNUP_SUCCESS\" });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"SIGNUP_ERROR\", err });\r\n      });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}