{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\src\\\\auth\\\\SignIn.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { withRouter } from \"react-router-dom\";\nimport { database } from \"../Firebase\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  var top = 50 + rand();\n  var left = 50 + rand();\n  return {\n    top: \"\".concat(top, \"%\"),\n    left: \"\".concat(left, \"%\"),\n    transform: \"translate(-\".concat(top, \"%, -\").concat(left, \"%)\")\n  };\n}\n\nvar styles = function styles(theme) {\n  return {\n    card: {\n      width: 490,\n      height: 320,\n      marginLeft: 140,\n      backgroundColor: \"#f7f7f7\"\n    },\n    tit: {\n      textDecoration: \"none\"\n    },\n    title: {\n      fontSize: 20,\n      fontFamily: \"'Montserrat', sans-serif\"\n    },\n    textField: {\n      marginLeft: 30,\n      width: 240,\n      padding: 5\n    },\n    pos: {\n      marginBottom: 12\n    },\n    reg: {\n      marginLeft: 35\n    },\n    login: {\n      fontSize: 20,\n      fontFamily: \"'Montserrat', sans-serif\",\n      marginLeft: 30,\n      color: \"#6a3499\"\n    },\n    cssLabel: {\n      \"&$cssFocused\": {\n        color: \"#6a3499\",\n        fontSize: 20\n      }\n    },\n    cssFocused: {},\n    cssUnderline: {\n      \"&:after\": {\n        borderBottomColor: \"#6a3499\"\n      }\n    },\n    cssOutlinedInput: {\n      \"&$cssFocused $notchedOutline\": {\n        borderColor: \"#6a3499\"\n      }\n    },\n    notchedOutline: {},\n    bootstrapRoot: {\n      \"label + &\": {\n        marginTop: theme.spacing.unit * 3\n      }\n    },\n    bootstrapInput: {\n      borderRadius: 6,\n      backgroundColor: \"#6a3499\",\n      border: \"1px solid #6a3499\",\n      fontSize: 16,\n      width: \"600px\",\n      padding: \"10px 12px\",\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\"-apple-system\", \"BlinkMacSystemFont\", '\"Segoe UI\"', \"Roboto\", '\"Helvetica Neue\"', \"Arial\", \"sans-serif\", '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(\",\"),\n      \"&:focus\": {\n        borderRadius: 6,\n        borderColor: \"#6a3499\",\n        boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\"\n      }\n    },\n    bootstrapFormLabel: {\n      fontSize: 20\n    },\n    dense: {\n      marginTop: 25\n    },\n    input: {\n      marginLeft: 5,\n      fontSize: 20\n    },\n    paper: {\n      position: \"absolute\",\n      width: theme.spacing.unit * 50,\n      backgroundColor: \"#c0bfcc\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing.unit * 4,\n      outline: \"none\"\n    },\n    register: {\n      fontSize: 15,\n      fontFamily: \"'Montserrat', sans-serif\",\n      color: \"#6a3499\"\n    }\n  };\n};\n\nvar SignIn =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SignIn, _React$Component);\n\n  function SignIn() {\n    var _this;\n\n    _classCallCheck(this, SignIn);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SignIn).call(this));\n    _this.state = {\n      open: false,\n      email: \"\",\n      password: \"\",\n      error: null\n    };\n\n    _this.handleOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.authWithEmailPassword = _this.authWithEmailPassword.bind(_assertThisInitialized(_this));\n    _this.state = {\n      redirect: false\n    };\n    return _this;\n  }\n\n  _createClass(SignIn, [{\n    key: \"authWithEmailPassword\",\n    value: function authWithEmailPassword(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var email = this.emailInput.value;\n      var password = this.passwordInput.value;\n      database.auth().fetchProvidersForEmail(email).then(function (providers) {\n        console.log(\"we're hitting the first then\");\n\n        if (providers.length === 0) {\n          // create user\n          return app.auth().createUserWithEmailAndPassword(email, password);\n        } else if (providers.indexOf(\"password\") === -1) {\n          _this2.toaster.show({\n            intent: Intent.WARNING,\n            message: \"Try alternative login.\"\n          });\n        } else {\n          // sign in with email/password\n          return app.auth().signInWithEmailAndPassword(email, password);\n        }\n      }).then(function (user) {\n        if (user && user.email) {\n          _this2.loginForm.reset();\n\n          _this2.setState({\n            redirect: true\n          });\n        }\n      }).catch(function (error) {\n        _this2.toaster.show({\n          intent: Intent.DANGER,\n          message: error.message\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sticky-anchor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"sticky\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return _this3.authWithEmailPassword(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Note\"), \"If you don't have an account already, this form will create your account.\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Email\", React.createElement(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        ref: function ref(input) {\n          _this3.emailInput = input;\n        },\n        placeholder: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"pt-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Password\", React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        ref: function ref(input) {\n          _this3.passwordInput = input;\n        },\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"pt-button pt-intent-primary\",\n        value: \"Log In\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SignIn;\n}(React.Component);\n\nSignIn.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SignIn);\n/*\n <Card className={classes.card}>\n            <CardContent className={classes.content}>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Ima≈° li ideju za dijeljenje svojih tips'n'tricks?\n              </Typography>\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Prijavi se ovdje!\n              </Typography>\n              <form onSubmit={this.handleSubmit}>\n                <TextField\n                  value={email}\n                  id=\"email\"\n                  type=\"email\"\n                  label=\"Email\"\n                  className={classes.textField}\n                  onChange={this.handleChange}\n                  variant=\"outlined\"\n                  InputLabelProps={{\n                    classes: {\n                      root: classes.cssLabel,\n                      focused: classes.cssFocused\n                    }\n                  }}\n                  InputProps={{\n                    classes: {\n                      root: classes.cssOutlinedInput,\n                      focused: classes.cssFocused,\n                      notchedOutline: classes.notchedOutline,\n                      input: classes.input\n                    }\n                  }}\n                />{\" \"}\n                <br />\n                <TextField\n                  value={password}\n                  id=\"password\"\n                  label=\"Lozinka\"\n                  type=\"password\"\n                  className={classes.textField}\n                  autoComplete=\"current-password\"\n                  variant=\"outlined\"\n                  onChange={this.handleChange}\n                  InputLabelProps={{\n                    classes: {\n                      root: classes.cssLabel,\n                      focused: classes.cssFocused\n                    }\n                  }}\n                  InputProps={{\n                    classes: {\n                      root: classes.cssOutlinedInput,\n                      focused: classes.cssFocused,\n                      notchedOutline: classes.notchedOutline,\n                      input: classes.input\n                    }\n                  }}\n                />{\" \"}\n                <br />\n                <Button className={classes.login}>Ulogiraj se</Button>\n              </form>\n              {error ? <p>{error.message}</p> : null}\n              <form>\n                <Typography\n                  className={classes.reg}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Nema≈° korisniƒçki raƒçun? registraj se{\" \"}\n                  <Button\n                    onClick={this.handleOpen}\n                    className={classes.register}\n                  >\n                    ovdje\n                  </Button>\n                </Typography>\n\n                <Modal\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  open={this.state.open}\n                  onClose={this.handleClose}\n                >\n                  <div style={getModalStyle()} className={classes.paper}>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Registriraj se ovdje!\n                    </Typography>\n                    <TextField\n                      name=\"ime\"\n                      label=\"Ime\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      name=\"prezime\"\n                      label=\"Prezime\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      name=\"email\"\n                      label=\"Email\"\n                      type=\"email\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      id=\"outlined-password-input\"\n                      label=\"Lozinka\"\n                      type=\"password\"\n                      className={classes.textField}\n                      autoComplete=\"current-password\"\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <Button className={classes.login}>Registracija</Button>\n                  </div>\n                </Modal>\n              </form>\n            </CardContent>\n          </Card>\n*/","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\auth\\SignIn.jsx"],"names":["React","PropTypes","withStyles","Card","CardContent","Button","Typography","TextField","Modal","withRouter","database","rand","Math","round","random","getModalStyle","top","left","transform","styles","theme","card","width","height","marginLeft","backgroundColor","tit","textDecoration","title","fontSize","fontFamily","textField","padding","pos","marginBottom","reg","login","color","cssLabel","cssFocused","cssUnderline","borderBottomColor","cssOutlinedInput","borderColor","notchedOutline","bootstrapRoot","marginTop","spacing","unit","bootstrapInput","borderRadius","border","transition","transitions","create","join","boxShadow","bootstrapFormLabel","dense","input","paper","position","shadows","outline","register","SignIn","state","open","email","password","error","handleOpen","setState","handleClose","authWithEmailPassword","bind","redirect","event","preventDefault","emailInput","value","passwordInput","auth","fetchProvidersForEmail","then","providers","console","log","length","app","createUserWithEmailAndPassword","indexOf","toaster","show","intent","Intent","WARNING","message","signInWithEmailAndPassword","user","loginForm","reset","catch","DANGER","classes","props","Component","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AACA,SAASC,IAAT,GAAgB;AACd,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,EAAxC;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,MAAMC,GAAG,GAAG,KAAKL,IAAI,EAArB;AACA,MAAMM,IAAI,GAAG,KAAKN,IAAI,EAAtB;AAEA,SAAO;AACLK,IAAAA,GAAG,YAAKA,GAAL,MADE;AAELC,IAAAA,IAAI,YAAKA,IAAL,MAFC;AAGLC,IAAAA,SAAS,uBAAgBF,GAAhB,iBAA0BC,IAA1B;AAHJ,GAAP;AAKD;;AACD,IAAME,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACvBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,GADH;AAEJC,MAAAA,MAAM,EAAE,GAFJ;AAGJC,MAAAA,UAAU,EAAE,GAHR;AAIJC,MAAAA,eAAe,EAAE;AAJb,KADiB;AAOvBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,cAAc,EAAE;AADb,KAPkB;AAUvBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,UAAU,EAAE;AAFP,KAVgB;AAcvBC,IAAAA,SAAS,EAAE;AACTP,MAAAA,UAAU,EAAE,EADH;AAETF,MAAAA,KAAK,EAAE,GAFE;AAGTU,MAAAA,OAAO,EAAE;AAHA,KAdY;AAmBvBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,YAAY,EAAE;AADX,KAnBkB;AAsBvBC,IAAAA,GAAG,EAAE;AACHX,MAAAA,UAAU,EAAE;AADT,KAtBkB;AAyBvBY,IAAAA,KAAK,EAAE;AACLP,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,UAAU,EAAE,0BAFP;AAGLN,MAAAA,UAAU,EAAE,EAHP;AAILa,MAAAA,KAAK,EAAE;AAJF,KAzBgB;AA+BvBC,IAAAA,QAAQ,EAAE;AACR,sBAAgB;AACdD,QAAAA,KAAK,EAAE,SADO;AAEdR,QAAAA,QAAQ,EAAE;AAFI;AADR,KA/Ba;AAqCvBU,IAAAA,UAAU,EAAE,EArCW;AAsCvBC,IAAAA,YAAY,EAAE;AACZ,iBAAW;AACTC,QAAAA,iBAAiB,EAAE;AADV;AADC,KAtCS;AA2CvBC,IAAAA,gBAAgB,EAAE;AAChB,sCAAgC;AAC9BC,QAAAA,WAAW,EAAE;AADiB;AADhB,KA3CK;AAgDvBC,IAAAA,cAAc,EAAE,EAhDO;AAiDvBC,IAAAA,aAAa,EAAE;AACb,mBAAa;AACXC,QAAAA,SAAS,EAAE1B,KAAK,CAAC2B,OAAN,CAAcC,IAAd,GAAqB;AADrB;AADA,KAjDQ;AAsDvBC,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,CADA;AAEdzB,MAAAA,eAAe,EAAE,SAFH;AAGd0B,MAAAA,MAAM,EAAE,mBAHM;AAIdtB,MAAAA,QAAQ,EAAE,EAJI;AAKdP,MAAAA,KAAK,EAAE,OALO;AAMdU,MAAAA,OAAO,EAAE,WANK;AAOdoB,MAAAA,UAAU,EAAEhC,KAAK,CAACiC,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,cAAD,EAAiB,YAAjB,CAAzB,CAPE;AAQd;AACAxB,MAAAA,UAAU,EAAE,CACV,eADU,EAEV,oBAFU,EAGV,YAHU,EAIV,QAJU,EAKV,kBALU,EAMV,OANU,EAOV,YAPU,EAQV,qBARU,EASV,kBATU,EAUV,mBAVU,EAWVyB,IAXU,CAWL,GAXK,CATE;AAqBd,iBAAW;AACTL,QAAAA,YAAY,EAAE,CADL;AAETP,QAAAA,WAAW,EAAE,SAFJ;AAGTa,QAAAA,SAAS,EAAE;AAHF;AArBG,KAtDO;AAiFvBC,IAAAA,kBAAkB,EAAE;AAClB5B,MAAAA,QAAQ,EAAE;AADQ,KAjFG;AAoFvB6B,IAAAA,KAAK,EAAE;AACLZ,MAAAA,SAAS,EAAE;AADN,KApFgB;AAuFvBa,IAAAA,KAAK,EAAE;AACLnC,MAAAA,UAAU,EAAE,CADP;AAELK,MAAAA,QAAQ,EAAE;AAFL,KAvFgB;AA2FvB+B,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELvC,MAAAA,KAAK,EAAEF,KAAK,CAAC2B,OAAN,CAAcC,IAAd,GAAqB,EAFvB;AAGLvB,MAAAA,eAAe,EAAE,SAHZ;AAIL+B,MAAAA,SAAS,EAAEpC,KAAK,CAAC0C,OAAN,CAAc,CAAd,CAJN;AAKL9B,MAAAA,OAAO,EAAEZ,KAAK,CAAC2B,OAAN,CAAcC,IAAd,GAAqB,CALzB;AAMLe,MAAAA,OAAO,EAAE;AANJ,KA3FgB;AAmGvBC,IAAAA,QAAQ,EAAE;AACRnC,MAAAA,QAAQ,EAAE,EADF;AAERC,MAAAA,UAAU,EAAE,0BAFJ;AAGRO,MAAAA,KAAK,EAAE;AAHC;AAnGa,GAAL;AAAA,CAApB;;IA0GM4B,M;;;;;AAOJ,oBAAc;AAAA;;AAAA;;AACZ;AADY,UANdC,KAMc,GANN;AACNC,MAAAA,IAAI,EAAE,KADA;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,KAAK,EAAE;AAJD,KAMM;;AAAA,UAOdC,UAPc,GAOD,YAAM;AACjB,YAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KATa;;AAAA,UAWdM,WAXc,GAWA,YAAM;AAClB,YAAKD,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAba;;AAEZ,UAAKO,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BC,IAA3B,+BAA7B;AACA,UAAKT,KAAL,GAAa;AACXU,MAAAA,QAAQ,EAAE;AADC,KAAb;AAHY;AAMb;;;;0CASqBC,K,EAAO;AAAA;;AAC3BA,MAAAA,KAAK,CAACC,cAAN;AAEA,UAAMV,KAAK,GAAG,KAAKW,UAAL,CAAgBC,KAA9B;AACA,UAAMX,QAAQ,GAAG,KAAKY,aAAL,CAAmBD,KAApC;AAEAtE,MAAAA,QAAQ,CACLwE,IADH,GAEGC,sBAFH,CAE0Bf,KAF1B,EAGGgB,IAHH,CAGQ,UAAAC,SAAS,EAAI;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,YAAIF,SAAS,CAACG,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACA,iBAAOC,GAAG,CAACP,IAAJ,GAAWQ,8BAAX,CAA0CtB,KAA1C,EAAiDC,QAAjD,CAAP;AACD,SAHD,MAGO,IAAIgB,SAAS,CAACM,OAAV,CAAkB,UAAlB,MAAkC,CAAC,CAAvC,EAA0C;AAC/C,UAAA,MAAI,CAACC,OAAL,CAAaC,IAAb,CAAkB;AAChBC,YAAAA,MAAM,EAAEC,MAAM,CAACC,OADC;AAEhBC,YAAAA,OAAO,EAAE;AAFO,WAAlB;AAID,SALM,MAKA;AACL;AACA,iBAAOR,GAAG,CAACP,IAAJ,GAAWgB,0BAAX,CAAsC9B,KAAtC,EAA6CC,QAA7C,CAAP;AACD;AACF,OAjBH,EAkBGe,IAlBH,CAkBQ,UAAAe,IAAI,EAAI;AACZ,YAAIA,IAAI,IAAIA,IAAI,CAAC/B,KAAjB,EAAwB;AACtB,UAAA,MAAI,CAACgC,SAAL,CAAeC,KAAf;;AACA,UAAA,MAAI,CAAC7B,QAAL,CAAc;AAAEI,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACD;AACF,OAvBH,EAwBG0B,KAxBH,CAwBS,UAAAhC,KAAK,EAAI;AACd,QAAA,MAAI,CAACsB,OAAL,CAAaC,IAAb,CAAkB;AAAEC,UAAAA,MAAM,EAAEC,MAAM,CAACQ,MAAjB;AAAyBN,UAAAA,OAAO,EAAE3B,KAAK,CAAC2B;AAAxC,SAAlB;AACD,OA1BH;AA2BD;;;6BACQ;AAAA;;AAAA,UACCO,OADD,GACa,KAAKC,KADlB,CACCD,OADD;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAM,QAAA,QAAQ,EAAE,kBAAA3B,KAAK;AAAA,iBAAI,MAAI,CAACH,qBAAL,CAA2BG,KAA3B,CAAJ;AAAA,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,8EADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,GAAG,EAAE,aAAAlB,KAAK,EAAI;AACZ,UAAA,MAAI,CAACoB,UAAL,GAAkBpB,KAAlB;AACD,SALH;AAME,QAAA,WAAW,EAAC,OANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CANF,EAiBE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,GAAG,EAAE,aAAAA,KAAK,EAAI;AACZ,UAAA,MAAI,CAACsB,aAAL,GAAqBtB,KAArB;AACD,SALH;AAME,QAAA,WAAW,EAAC,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAjBF,EA4BE;AAAO,QAAA,SAAS,EAAC,6BAAjB;AAA+C,QAAA,KAAK,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BF,CAHF,CADF;AAoCD;;;;EA9FkB3D,KAAK,CAAC0G,S;;AAiG3BzC,MAAM,CAAC0C,SAAP,GAAmB;AACjBH,EAAAA,OAAO,EAAEvG,SAAS,CAAC2G,MAAV,CAAiBC;AADT,CAAnB;AAIA,eAAe3G,UAAU,CAACiB,MAAD,CAAV,CAAmB8C,MAAnB,CAAf;AACA","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { withRouter } from \"react-router-dom\";\nimport { database } from \"../Firebase\";\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\nconst styles = theme => ({\n  card: {\n    width: 490,\n    height: 320,\n    marginLeft: 140,\n    backgroundColor: \"#f7f7f7\"\n  },\n  tit: {\n    textDecoration: \"none\"\n  },\n  title: {\n    fontSize: 20,\n    fontFamily: \"'Montserrat', sans-serif\"\n  },\n  textField: {\n    marginLeft: 30,\n    width: 240,\n    padding: 5\n  },\n  pos: {\n    marginBottom: 12\n  },\n  reg: {\n    marginLeft: 35\n  },\n  login: {\n    fontSize: 20,\n    fontFamily: \"'Montserrat', sans-serif\",\n    marginLeft: 30,\n    color: \"#6a3499\"\n  },\n  cssLabel: {\n    \"&$cssFocused\": {\n      color: \"#6a3499\",\n      fontSize: 20\n    }\n  },\n  cssFocused: {},\n  cssUnderline: {\n    \"&:after\": {\n      borderBottomColor: \"#6a3499\"\n    }\n  },\n  cssOutlinedInput: {\n    \"&$cssFocused $notchedOutline\": {\n      borderColor: \"#6a3499\"\n    }\n  },\n  notchedOutline: {},\n  bootstrapRoot: {\n    \"label + &\": {\n      marginTop: theme.spacing.unit * 3\n    }\n  },\n  bootstrapInput: {\n    borderRadius: 6,\n    backgroundColor: \"#6a3499\",\n    border: \"1px solid #6a3499\",\n    fontSize: 16,\n    width: \"600px\",\n    padding: \"10px 12px\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"'\n    ].join(\",\"),\n    \"&:focus\": {\n      borderRadius: 6,\n      borderColor: \"#6a3499\",\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\"\n    }\n  },\n  bootstrapFormLabel: {\n    fontSize: 20\n  },\n  dense: {\n    marginTop: 25\n  },\n  input: {\n    marginLeft: 5,\n    fontSize: 20\n  },\n  paper: {\n    position: \"absolute\",\n    width: theme.spacing.unit * 50,\n    backgroundColor: \"#c0bfcc\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  },\n  register: {\n    fontSize: 15,\n    fontFamily: \"'Montserrat', sans-serif\",\n    color: \"#6a3499\"\n  }\n});\n\nclass SignIn extends React.Component {\n  state = {\n    open: false,\n    email: \"\",\n    password: \"\",\n    error: null\n  };\n  constructor() {\n    super();\n    this.authWithEmailPassword = this.authWithEmailPassword.bind(this);\n    this.state = {\n      redirect: false\n    };\n  }\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  authWithEmailPassword(event) {\n    event.preventDefault();\n\n    const email = this.emailInput.value;\n    const password = this.passwordInput.value;\n\n    database\n      .auth()\n      .fetchProvidersForEmail(email)\n      .then(providers => {\n        console.log(\"we're hitting the first then\");\n        if (providers.length === 0) {\n          // create user\n          return app.auth().createUserWithEmailAndPassword(email, password);\n        } else if (providers.indexOf(\"password\") === -1) {\n          this.toaster.show({\n            intent: Intent.WARNING,\n            message: \"Try alternative login.\"\n          });\n        } else {\n          // sign in with email/password\n          return app.auth().signInWithEmailAndPassword(email, password);\n        }\n      })\n      .then(user => {\n        if (user && user.email) {\n          this.loginForm.reset();\n          this.setState({ redirect: true });\n        }\n      })\n      .catch(error => {\n        this.toaster.show({ intent: Intent.DANGER, message: error.message });\n      });\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <div className=\"sticky-anchor\" />\n        <div className=\"sticky\" />\n        <form onSubmit={event => this.authWithEmailPassword(event)}>\n          <div>\n            <h5>Note</h5>\n            If you don't have an account already, this form will create your\n            account.\n          </div>\n          <label>\n            Email\n            <input\n              name=\"email\"\n              type=\"email\"\n              ref={input => {\n                this.emailInput = input;\n              }}\n              placeholder=\"Email\"\n            />\n          </label>\n          <label className=\"pt-label\">\n            Password\n            <input\n              name=\"password\"\n              type=\"password\"\n              ref={input => {\n                this.passwordInput = input;\n              }}\n              placeholder=\"Password\"\n            />\n          </label>\n          <input className=\"pt-button pt-intent-primary\" value=\"Log In\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nSignIn.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SignIn);\n/*\n <Card className={classes.card}>\n            <CardContent className={classes.content}>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Ima≈° li ideju za dijeljenje svojih tips'n'tricks?\n              </Typography>\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Prijavi se ovdje!\n              </Typography>\n              <form onSubmit={this.handleSubmit}>\n                <TextField\n                  value={email}\n                  id=\"email\"\n                  type=\"email\"\n                  label=\"Email\"\n                  className={classes.textField}\n                  onChange={this.handleChange}\n                  variant=\"outlined\"\n                  InputLabelProps={{\n                    classes: {\n                      root: classes.cssLabel,\n                      focused: classes.cssFocused\n                    }\n                  }}\n                  InputProps={{\n                    classes: {\n                      root: classes.cssOutlinedInput,\n                      focused: classes.cssFocused,\n                      notchedOutline: classes.notchedOutline,\n                      input: classes.input\n                    }\n                  }}\n                />{\" \"}\n                <br />\n                <TextField\n                  value={password}\n                  id=\"password\"\n                  label=\"Lozinka\"\n                  type=\"password\"\n                  className={classes.textField}\n                  autoComplete=\"current-password\"\n                  variant=\"outlined\"\n                  onChange={this.handleChange}\n                  InputLabelProps={{\n                    classes: {\n                      root: classes.cssLabel,\n                      focused: classes.cssFocused\n                    }\n                  }}\n                  InputProps={{\n                    classes: {\n                      root: classes.cssOutlinedInput,\n                      focused: classes.cssFocused,\n                      notchedOutline: classes.notchedOutline,\n                      input: classes.input\n                    }\n                  }}\n                />{\" \"}\n                <br />\n                <Button className={classes.login}>Ulogiraj se</Button>\n              </form>\n              {error ? <p>{error.message}</p> : null}\n              <form>\n                <Typography\n                  className={classes.reg}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Nema≈° korisniƒçki raƒçun? registraj se{\" \"}\n                  <Button\n                    onClick={this.handleOpen}\n                    className={classes.register}\n                  >\n                    ovdje\n                  </Button>\n                </Typography>\n\n                <Modal\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  open={this.state.open}\n                  onClose={this.handleClose}\n                >\n                  <div style={getModalStyle()} className={classes.paper}>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Registriraj se ovdje!\n                    </Typography>\n                    <TextField\n                      name=\"ime\"\n                      label=\"Ime\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      name=\"prezime\"\n                      label=\"Prezime\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      name=\"email\"\n                      label=\"Email\"\n                      type=\"email\"\n                      className={classes.textField}\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <TextField\n                      id=\"outlined-password-input\"\n                      label=\"Lozinka\"\n                      type=\"password\"\n                      className={classes.textField}\n                      autoComplete=\"current-password\"\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        classes: {\n                          root: classes.cssLabel,\n                          focused: classes.cssFocused\n                        }\n                      }}\n                      InputProps={{\n                        classes: {\n                          root: classes.cssOutlinedInput,\n                          focused: classes.cssFocused,\n                          notchedOutline: classes.notchedOutline,\n                          input: classes.input\n                        }\n                      }}\n                    />{\" \"}\n                    <br />\n                    <Button className={classes.login}>Registracija</Button>\n                  </div>\n                </Modal>\n              </form>\n            </CardContent>\n          </Card>\n*/\n"]},"metadata":{},"sourceType":"module"}