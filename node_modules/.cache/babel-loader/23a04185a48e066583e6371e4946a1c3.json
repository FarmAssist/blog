{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\src\\\\Container\\\\SubmitComment.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport { errStyle, required } from \"../Helpers/ReduxFormValidation\";\nimport { saveComment } from \"../Actions/PostActions\";\n\nvar SubmitComment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SubmitComment, _Component);\n\n  function SubmitComment() {\n    _classCallCheck(this, SubmitComment);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SubmitComment).apply(this, arguments));\n  }\n\n  _createClass(SubmitComment, [{\n    key: \"commentComponent\",\n    value: function commentComponent(field) {\n      var touched = field.meta,\n          error = field.error;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"textarea\", Object.assign({\n        className: \"form-control\",\n        style: touched && error ? errStyle : null\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this$props = this.props,\n          saveComment = _this$props.saveComment,\n          id = _this$props.id,\n          uid = _this$props.uid,\n          dispatch = _this$props.dispatch;\n      saveComment(id, values, uid).then(function () {\n        dispatch(reset(\"SubmitCommentForm\"));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"content\",\n        component: this.commentComponent,\n        validate: required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-success btn-small mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return SubmitComment;\n}(Component);\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    uid: state.user.uid\n  };\n}\n\nexport default reduxForm({\n  form: \"SubmitCommentForm\"\n})(connect(mapStateToProps, {\n  saveComment: saveComment\n})(SubmitComment));","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\Container\\SubmitComment.jsx"],"names":["React","Component","connect","Field","reduxForm","reset","errStyle","required","saveComment","SubmitComment","field","touched","meta","error","input","values","props","id","uid","dispatch","then","handleSubmit","onSubmit","bind","commentComponent","mapStateToProps","state","ownProps","user","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,KAA3B,QAAwC,YAAxC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,gCAAnC;AACA,SAASC,WAAT,QAA4B,wBAA5B;;IAEMC,a;;;;;;;;;;;;;qCACaC,K,EAAO;AAAA,UACRC,OADQ,GACWD,KADX,CACdE,IADc;AAAA,UACCC,KADD,GACWH,KADX,CACCG,KADD;AAEtB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,KAAK,EAAEF,OAAO,IAAIE,KAAX,GAAmBP,QAAnB,GAA8B;AAFvC,SAGMI,KAAK,CAACI,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AASD;;;6BAEQC,M,EAAQ;AAAA,wBAC4B,KAAKC,KADjC;AAAA,UACPR,WADO,eACPA,WADO;AAAA,UACMS,EADN,eACMA,EADN;AAAA,UACUC,GADV,eACUA,GADV;AAAA,UACeC,QADf,eACeA,QADf;AAEfX,MAAAA,WAAW,CAACS,EAAD,EAAKF,MAAL,EAAaG,GAAb,CAAX,CAA6BE,IAA7B,CAAkC,YAAM;AACtCD,QAAAA,QAAQ,CAACd,KAAK,CAAC,mBAAD,CAAN,CAAR;AACD,OAFD;AAGD;;;6BAEQ;AAAA,UACCgB,YADD,GACkB,KAAKL,KADvB,CACCK,YADD;AAEP,aACE;AAAM,QAAA,QAAQ,EAAEA,YAAY,CAAC,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,SAAS,EAAE,KAAKC,gBAFlB;AAGE,QAAA,QAAQ,EAAEjB,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,gCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,CADF;AAYD;;;;EAnCyBN,S;;AAsC5B,SAASwB,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACxC,SAAO;AAAET,IAAAA,GAAG,EAAEQ,KAAK,CAACE,IAAN,CAAWV;AAAlB,GAAP;AACD;;AAED,eAAed,SAAS,CAAC;AACvByB,EAAAA,IAAI,EAAE;AADiB,CAAD,CAAT,CAGb3B,OAAO,CACLuB,eADK,EAEL;AAAEjB,EAAAA,WAAW,EAAXA;AAAF,CAFK,CAAP,CAGEC,aAHF,CAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport { errStyle, required } from \"../Helpers/ReduxFormValidation\";\r\nimport { saveComment } from \"../Actions/PostActions\";\r\n\r\nclass SubmitComment extends Component {\r\n  commentComponent(field) {\r\n    const { meta: touched, error } = field;\r\n    return (\r\n      <div>\r\n        <textarea\r\n          className=\"form-control\"\r\n          style={touched && error ? errStyle : null}\r\n          {...field.input}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit(values) {\r\n    const { saveComment, id, uid, dispatch } = this.props;\r\n    saveComment(id, values, uid).then(() => {\r\n      dispatch(reset(\"SubmitCommentForm\"));\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit } = this.props;\r\n    return (\r\n      <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\r\n        <Field\r\n          name=\"content\"\r\n          component={this.commentComponent}\r\n          validate={required}\r\n        />\r\n        <button type=\"submit\" className=\"btn btn-success btn-small mt-1\">\r\n          Save\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return { uid: state.user.uid };\r\n}\r\n\r\nexport default reduxForm({\r\n  form: \"SubmitCommentForm\"\r\n})(\r\n  connect(\r\n    mapStateToProps,\r\n    { saveComment }\r\n  )(SubmitComment)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}