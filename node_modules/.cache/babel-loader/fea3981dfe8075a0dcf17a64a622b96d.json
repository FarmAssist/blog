{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kanto\\\\OneDrive\\\\Desktop\\\\blog\\\\src\\\\Container\\\\ListPosts.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport Link from \"react-router-dom/es/Link\";\nimport SimpleBox from \"../Components/SimpleBox\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"renderUsers\",\n    value: function renderUsers() {\n      var _this$props = this.props,\n          userData = _this$props.userData,\n          uid = _this$props.uid;\n      console.log(userData);\n      return _.map(_.filter(userData, function (user, key) {\n        return key !== uid;\n      }), function (user, key) {\n        return React.createElement(SimpleBox, {\n          key: key,\n          title: \"User's Name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, user.fname, \" \", user.lname));\n      });\n    }\n  }, {\n    key: \"renderPosts\",\n    value: function renderPosts() {\n      var _this = this;\n\n      return _.map(this.props.posts, function (post, key) {\n        return React.createElement(PostCard, {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/\".concat(key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, post.title)), React.createElement(\"p\", {\n          className: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, post.body), post.uid === _this.props.user.uid && React.createElement(\"button\", {\n          className: \"btn btn-danger float-right\",\n          onClick: function onClick() {\n            return _this.props.deletePost(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"Delete\"));\n      });\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _this$props2 = this.props,\n          uid = _this$props2.uid,\n          userData = _this$props2.userData;\n      return React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        placeholder: \"Enter a \".concat(field.label, \"...\")\n      }, field.input, {\n        className: field.class,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      this.props.savePost(values, this.props.user.uid).then(this.props.dispatch(reset(\"NewPost\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          _this2.props.logout();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Sign out\")), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.renderPosts()), React.createElement(\"div\", {\n        className: \"navbar fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        className: \"footerForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderField,\n        label: \"Title\",\n        class: \"footer-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"body\",\n        component: this.renderField,\n        label: \"Body\",\n        class: \"footer-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn footer-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Post\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, uid && React.createElement(\"div\", {\n        className: \"text-center text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Welcome \", userData[uid].fname, \" \", userData[uid].lname)), this.renderUsers())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nfunction mapStateToProps(state) {\n  var checkedUser = state.user || {};\n  return {\n    uid: checkedUser.uid,\n    userData: state.dbUsers\n  };\n}\n\nform = connect(function (state, ownProps) {\n  return {\n    posts: state.posts,\n    user: state.user\n  };\n}, {\n  savePost: savePost,\n  getPosts: getPosts,\n  deletePost: deletePost,\n  getUser: getUser,\n  logout: logout\n})(form);\nexport default connect(mapStateToProps)(form);\n/*import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport Link from \"react-router-dom/es/Link\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport \"../Layout/Navbar.css\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Navbar from \"../Layout/Navbar\";\nimport MenuBar from \"../Layout/MenuBar\";\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600,\n    backgroundColor: \"#e0e0e0\",\n    marginTop: -10\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    top: 5\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  }\n});\nclass App extends Component {\n  componentWillMount() {\n    this.props.getPosts();\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.user.loading === false &&\n      nextProps.user.email === undefined\n    ) {\n      this.props.history.replace(\"/Login\");\n    }\n  }\n\n  renderPosts() {\n    const { classes } = this.props;\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <Link to={`/${key}`}>\n          <div className=\"tile\">\n            <CardMedia>\n              <span>{renderHTML(post.naslovna)}</span>\n\n              <div className=\"text\">\n                <h1>{post.title}</h1>\n\n                <p className=\"animate-text\">\n                  <span className=\"sazetak\">{renderHTML(post.sazetak)}</span>\n                </p>\n                <p className=\"animate-text\">\n                  <span className=\"signature\">\n                    Napisao : {renderHTML(post.signature)}\n                  </span>\n                </p>\n              </div>\n            </CardMedia>\n          </div>{\" \"}\n        </Link>\n      );\n    });\n  }\n\n  renderField(field) {\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n      />\n    );\n  }\n  onSubmit(values) {\n    this.props.savePost(values).then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <MenuBar />\n        <div className=\"container\">\n          <div className=\"main\">{this.renderPosts()}</div>\n        </div>\n        <div className=\"side\">\n          <SignedInLinks />\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(form);\n/*  <Card className={classes.card}>\n              <CardActionArea className={classes.actionarea}>\n                <CardMedia className={classes.media} height=\"100\" width=\"300\">\n                  <span>{renderHTML(post.naslovna)}</span>\n\n                  <CardContent className={classes.overlay}>\n                    {<span className={classes.title}>{post.title} </span>}\n                  </CardContent>\n                </CardMedia>\n              </CardActionArea>\n            </Card>\n            */\n\n/*\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport Link from \"react-router-dom/es/Link\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport \"../Layout/Navbar.css\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    marginTop: 15\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    flex: \"1 0 auto\",\n    margin: theme.spacing.unit\n  }\n});\nclass App extends Component {\n  componentWillMount() {\n    this.props.getPosts();\n  }\n  renderPosts() {\n    const { classes } = this.props;\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <div className=\"row\">\n          <div className={classes.col}>\n            <Link to={`/${key}`}>\n              <Card className={classes.card}>\n                <CardActionArea className={classes.actionarea}>\n                  <CardMedia className={classes.media} height=\"100\" width=\"300\">\n                    <span className=\"post-naslovna\">\n                      {renderHTML(post.naslovna)}\n                    </span>\n                    <CardContent className={classes.overlay}>\n                      {<span className={classes.title}>{post.title} </span>}\n                    </CardContent>\n                  </CardMedia>\n                </CardActionArea>\n              </Card>\n            </Link>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  renderField(field) {\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n      />\n    );\n  }\n  onSubmit(values) {\n    this.props.savePost(values).then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <div className=\"navbar\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              this.props.logout();\n            }}\n          >\n            Sign out\n          </button>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 right\">{this.renderPosts()}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts\n  }),\n  { savePost, getPosts, deletePost }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(form);\n\n/*   <button className=\"btn btn-danger float-right\" onClick={() => this.props.deletePost(key)}>Delete</button>*/\n\n/* <Link to= {`/${key}`}> </Link> */","map":{"version":3,"sources":["C:\\Users\\kanto\\OneDrive\\Desktop\\blog\\src\\Container\\ListPosts.jsx"],"names":["React","Component","connect","getPosts","savePost","deletePost","Field","reduxForm","reset","_","PostCard","getUser","logout","Link","SimpleBox","App","props","userData","uid","console","log","map","filter","user","key","fname","lname","posts","post","title","body","field","label","input","class","values","then","dispatch","handleSubmit","renderPosts","onSubmit","bind","renderField","renderUsers","form","mapStateToProps","state","checkedUser","dbUsers","ownProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport PostCard from \"../Components/PostCard\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport Link from \"react-router-dom/es/Link\";\nimport SimpleBox from \"../Components/SimpleBox\";\nclass App extends Component {\n  renderUsers() {\n    const { userData, uid } = this.props;\n    console.log(userData);\n    return _.map(\n      _.filter(userData, (user, key) => {\n        return key !== uid;\n      }),\n      (user, key) => {\n        return (\n          <SimpleBox key={key} title=\"User's Name\">\n            <div className=\"card-body text-center\">\n              {user.fname} {user.lname}\n            </div>\n          </SimpleBox>\n        );\n      }\n    );\n  }\n  renderPosts() {\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <PostCard key={key}>\n          <Link to={`/${key}`}>\n            <h3 className=\"card-title\">{post.title}</h3>\n          </Link>\n          <p className=\"card-text\">{post.body}</p>\n          {post.uid === this.props.user.uid && (\n            <button\n              className=\"btn btn-danger float-right\"\n              onClick={() => this.props.deletePost(key)}\n            >\n              Delete\n            </button>\n          )}\n        </PostCard>\n      );\n    });\n  }\n\n  renderField(field) {\n    const { uid, userData } = this.props;\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n      />\n    );\n  }\n\n  onSubmit(values) {\n    this.props\n      .savePost(values, this.props.user.uid)\n      .then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div>\n        <div className=\"navbar\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              this.props.logout();\n            }}\n          >\n            Sign out\n          </button>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"main\">{this.renderPosts()}</div>\n          <div className=\"navbar fixed-bottom\">\n            <form\n              onSubmit={handleSubmit(this.onSubmit.bind(this))}\n              className=\"footerForm\"\n            >\n              <Field\n                name=\"title\"\n                component={this.renderField}\n                label=\"Title\"\n                class=\"footer-title\"\n              />\n              <Field\n                name=\"body\"\n                component={this.renderField}\n                label=\"Body\"\n                class=\"footer-body\"\n              />\n              <button type=\"submit\" className=\"btn footer-button\">\n                Post\n              </button>\n            </form>\n          </div>\n          <div>\n            {uid && (\n              <div className=\"text-center text-white\">\n                <h1>\n                  Welcome {userData[uid].fname} {userData[uid].lname}\n                </h1>\n              </div>\n            )}\n            {this.renderUsers()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\nfunction mapStateToProps(state) {\n  const checkedUser = state.user || {};\n  return { uid: checkedUser.uid, userData: state.dbUsers };\n}\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\n\nexport default connect(mapStateToProps)(form);\n\n/*import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport { getUser, logout } from \"../Actions/UserActions\";\nimport Link from \"react-router-dom/es/Link\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport \"../Layout/Navbar.css\";\nimport SignedInLinks from \"../Dashboard/SignedInLinks\";\nimport Navbar from \"../Layout/Navbar\";\nimport MenuBar from \"../Layout/MenuBar\";\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600,\n    backgroundColor: \"#e0e0e0\",\n    marginTop: -10\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    top: 5\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  }\n});\nclass App extends Component {\n  componentWillMount() {\n    this.props.getPosts();\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.user.loading === false &&\n      nextProps.user.email === undefined\n    ) {\n      this.props.history.replace(\"/Login\");\n    }\n  }\n\n  renderPosts() {\n    const { classes } = this.props;\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <Link to={`/${key}`}>\n          <div className=\"tile\">\n            <CardMedia>\n              <span>{renderHTML(post.naslovna)}</span>\n\n              <div className=\"text\">\n                <h1>{post.title}</h1>\n\n                <p className=\"animate-text\">\n                  <span className=\"sazetak\">{renderHTML(post.sazetak)}</span>\n                </p>\n                <p className=\"animate-text\">\n                  <span className=\"signature\">\n                    Napisao : {renderHTML(post.signature)}\n                  </span>\n                </p>\n              </div>\n            </CardMedia>\n          </div>{\" \"}\n        </Link>\n      );\n    });\n  }\n\n  renderField(field) {\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n      />\n    );\n  }\n  onSubmit(values) {\n    this.props.savePost(values).then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <MenuBar />\n        <div className=\"container\">\n          <div className=\"main\">{this.renderPosts()}</div>\n        </div>\n        <div className=\"side\">\n          <SignedInLinks />\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts,\n    user: state.user\n  }),\n  { savePost, getPosts, deletePost, getUser, logout }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(form);\n/*  <Card className={classes.card}>\n              <CardActionArea className={classes.actionarea}>\n                <CardMedia className={classes.media} height=\"100\" width=\"300\">\n                  <span>{renderHTML(post.naslovna)}</span>\n\n                  <CardContent className={classes.overlay}>\n                    {<span className={classes.title}>{post.title} </span>}\n                  </CardContent>\n                </CardMedia>\n              </CardActionArea>\n            </Card>\n            */\n\n/*\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts, savePost, deletePost } from \"../Actions/PostActions\";\nimport { reduxForm, reset } from \"redux-form\";\nimport _ from \"lodash\";\nimport Link from \"react-router-dom/es/Link\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport renderHTML from \"react-render-html\";\nimport compose from \"recompose/compose\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport \"../Layout/Navbar.css\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    left: 20,\n    fontSize: 20,\n    fontFamily: \" 'Josefin Sans', sans-serif;\"\n  },\n  col: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: 40,\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    md: \"auto\",\n    spacing: 0,\n    actionPosition: \"right\",\n    item: \"true\"\n  },\n  card: {\n    maxWidth: 600\n  },\n  media: {\n    verticalAlign: \"middle\",\n    height: 200,\n    marginTop: 15\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"160px\",\n    color: \"black\",\n    backgroundColor: \"rgba(176, 181, 177, 0.45)\",\n    width: 600\n  },\n  container: {\n    display: \"flex\"\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    flex: \"1 0 auto\",\n    margin: theme.spacing.unit\n  }\n});\nclass App extends Component {\n  componentWillMount() {\n    this.props.getPosts();\n  }\n  renderPosts() {\n    const { classes } = this.props;\n    return _.map(this.props.posts, (post, key) => {\n      return (\n        <div className=\"row\">\n          <div className={classes.col}>\n            <Link to={`/${key}`}>\n              <Card className={classes.card}>\n                <CardActionArea className={classes.actionarea}>\n                  <CardMedia className={classes.media} height=\"100\" width=\"300\">\n                    <span className=\"post-naslovna\">\n                      {renderHTML(post.naslovna)}\n                    </span>\n                    <CardContent className={classes.overlay}>\n                      {<span className={classes.title}>{post.title} </span>}\n                    </CardContent>\n                  </CardMedia>\n                </CardActionArea>\n              </Card>\n            </Link>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  renderField(field) {\n    return (\n      <input\n        type=\"text\"\n        placeholder={`Enter a ${field.label}...`}\n        {...field.input}\n        className={field.class}\n      />\n    );\n  }\n  onSubmit(values) {\n    this.props.savePost(values).then(this.props.dispatch(reset(\"NewPost\")));\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <div className=\"navbar\">\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              this.props.logout();\n            }}\n          >\n            Sign out\n          </button>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 right\">{this.renderPosts()}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nlet form = reduxForm({\n  form: \"NewPost\"\n})(App);\n\nform = connect(\n  (state, ownProps) => ({\n    posts: state.posts\n  }),\n  { savePost, getPosts, deletePost }\n)(form);\nform.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired\n};\nexport default compose(\n  withStyles(styles),\n  withWidth()\n)(form);\n\n/*   <button className=\"btn btn-danger float-right\" onClick={() => this.props.deletePost(key)}>Delete</button>*/\n/* <Link to= {`/${key}`}> </Link> */\n"]},"metadata":{},"sourceType":"module"}